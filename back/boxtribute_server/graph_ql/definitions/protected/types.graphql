# GraphQL basic types as returned by queries and mutations, and input types for queries.

interface ItemsCollection {
  id: ID!
  product: Product
  size: Size!
  numberOfItems: Int
  location: Location
  distributionEvent: DistributionEvent
}

type UnboxedItemsCollection implements ItemsCollection {
  id: ID!
  product: Product
  size: Size!
  numberOfItems: Int
  label: String
  location: Location
  distributionEvent: DistributionEvent
}

"""
Representation of a box storing items of a [`Product`]({{Types.Product}}) in a [`Location`]({{Types.Location}})
"""
type Box implements ItemsCollection {
  id: ID!
  " Sequence of numbers for identifying the box, usually written on box label "
  labelIdentifier: String!
  location: Location
  distributionEvent: DistributionEvent
  numberOfItems: Int
  product: Product
  size: Size!
  state: BoxState!
  qrCode: QrCode
  createdBy: User
  createdOn: Datetime
  lastModifiedBy: User
  lastModifiedOn: Datetime
  deletedOn: Datetime
  comment: String
  tags: [Tag!]
  history: [HistoryEntry!]
  " Returns null if box is not part of an active shipment "
  shipmentDetail: ShipmentDetail
}

type HistoryEntry {
  " IDs are not guaranteed to be unique due to history data being pulled from multiple sources "
  id: ID!
  changes: String!
  changeDate: Datetime
  user: User
}

interface Location {
  id: ID!
  base: Base
  name: String
  boxes(paginationInput: PaginationInput, filterInput: FilterBoxInput): BoxPage
}

"""
Representation of a QR code, possibly associated with a [`Box`]({{Types.Box}}).
"""
type QrCode {
  id: ID!
  code: String!
  " [`Box`]({{Types.Box}}) associated with the QR code (`null` if none associated) "
  box: Box
  createdOn: Datetime
}

"""
Representation of a product, containing information about [`ProductCategory`]({{Types.ProductCategory}}), size, and [`ProductGender`]({{Types.ProductGender}}).
The product is registered in a specific [`Base`]({{Types.Base}}).
"""
type Product {
  id: ID!
  name: String!
  type: ProductType!
  category: ProductCategory!
  sizeRange: SizeRange!
  base: Base
  price: Float
  gender: ProductGender
  comment: String
  inShop: Boolean!
  createdBy: User
  createdOn: Datetime
  lastModifiedBy: User
  lastModifiedOn: Datetime
  deletedOn: Datetime
}

"""
Representation of a standard product, containing information about [`ProductCategory`]({{Types.ProductCategory}}), size, and [`ProductGender`]({{Types.ProductGender}}).
Users can enable this standard product for their bases which creates a standard product instantiation.
"""
type StandardProduct {
  id: ID!
  name: String!
  category: ProductCategory!
  sizeRange: SizeRange!
  gender: ProductGender!
  version: Int!
  " All bases that this standard product is enabled for. "
  enabledForBases: [Base!]
  addedBy: User
  addedOn: Datetime
  deprecatedBy: User
  deprecatedOn: Datetime
  precededByProduct: StandardProduct
  supercededByProduct: StandardProduct
}

"""
Representation of a product category.
"""
type ProductCategory {
  id: ID!
  name: String!
  " List of all products registered in bases the client is authorized to view. "
  products(paginationInput: PaginationInput): ProductPage
  " Non-clothing categories don't have a product gender. "
  hasGender: Boolean!
}

"""
Utility type holding a page of [`Products`]({{Types.Product}}).
"""
type ProductPage {
  elements: [Product!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Utility type holding a page of [`StandardProducts`]({{Types.StandardProduct}}).
"""
type StandardProductPage {
  elements: [StandardProduct!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

" Union for resources that tags can be applied to. "
union TaggableResource = Box | Beneficiary

"""
Representation of a tag.
"""
type Tag {
  id: ID!
  name: String!
  description: String
  color: String
  type: TagType!
  " List of boxes and/or beneficiaries that have this tag assigned "
  taggedResources: [TaggableResource!]
  base: Base!
}

"""
Representation of product size (e.g. clothing size "XL", shoe size 39).
"""
type Size {
  id: ID!
  label: String!
}

"""
Representation of group of sizes (e.g. clothing sizes "S, M, L, XL").
"""
type SizeRange {
  id: ID!
  label: String!
  " List of sizes belonging to the group "
  sizes: [Size!]!
}

"""
Representation of a classic physical location used to store [`Boxes`]({{Types.Box}}) (e.g. a warehouse).
The location is part of a specific [`Base`]({{Types.Base}}).
"""
type ClassicLocation implements Location {
  id: ID!
  base: Base
  name: String
  " Used for ordering purposes "
  seq: Int
  isShop: Boolean!
  isStockroom: Boolean!
  " List of all [`Boxes`]({{Types.Box}}) (incl. deleted) in this classic location "
  boxes(paginationInput: PaginationInput, filterInput: FilterBoxInput): BoxPage
  " Default state for boxes in this classic location"
  defaultBoxState: BoxState
  createdBy: User
  createdOn: Datetime
  lastModifiedBy: User
  lastModifiedOn: Datetime
}

"""
Utility type holding a page of [`Boxes`]({{Types.Box}}).
"""
type BoxPage {
  elements: [Box!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Utility response type for box bulk-update mutations, containing both updated boxes and invalid boxes (ignored due to e.g. being deleted, in prohibited base, and/or non-existing).
"""
type BoxResult {
  updatedBoxes: [Box!]!
  invalidBoxLabelIdentifiers: [String!]!
}

"""
Representation of a base.
The base is managed by a specific [`Organisation`]({{Types.Organisation}}).
"""
type Base {
  id: ID!
  name: String!
  organisation: Organisation!
  deletedOn: Datetime
  " List of all [`Beneficiaries`]({{Types.Beneficiary}}) registered in this base. Optionally pass filters "
  beneficiaries(paginationInput: PaginationInput, filterInput: FilterBeneficiaryInput): BeneficiaryPage
  currencyName: String
  " List of all non-deleted [`ClassicLocations`]({{Types.ClassicLocation}}) present in this base "
  locations: [ClassicLocation!]!
  " List of all non-deleted [`Products`]({{Types.Product}}) registered in this base "
  products(filterInput: FilterProductInput): [Product!]!
  " List of all non-deleted [`Tags`]({{Types.Tag}}) registered in this base. Optionally filter for a [`resource type`]({{Types.TaggableResourceType}}) "
  tags(resourceType: TaggableResourceType): [Tag!]
  distributionSpots: [DistributionSpot!]!
  distributionEvents(states: [DistributionEventState!]): [DistributionEvent!]!

  # TODO: rethink these queries once the prototype testing is over
  # probably better to have filter parameters and only one query operation
  distributionEventsBeforeReturnedFromDistributionState: [DistributionEvent!]!
  distributionEventsInReturnedFromDistributionState: [DistributionEvent!]!

  distributionEventsTrackingGroups(states: [DistributionEventsTrackingGroupState!]): [DistributionEventsTrackingGroup!]!
  distributionEventsStatistics: [DistributionEventsStatistics!]!
}

"""
Representation of an organisation.
"""
type Organisation {
  id: ID!
  name: String!
  " List of all non-deleted [`Bases`]({{Types.Base}}) managed by this organisation. Accessible for any authenticated user "
  bases(filterInput: FilterBaseInput): [Base!]
}

type DistributionEventsStatistics {
  productName: String!
  genderLabel: String!
  categoryLabel: String!
  sizeLabel: String!
  inflow: Int!
  outflow: Int!
  earliestPossibleDistroDate: String!
  latestPossibleDistroDate: String!
  potentiallyInvolvedDistributionSpots: String!
  involvedDistributionEventIds: String!
  distroEventTrackingGroupId: String!
  productId: String!
  sizeId: String!
}

type DistributionEvent {
  id: ID!
  distributionSpot: DistributionSpot
  name: String
  state: DistributionEventState!

  plannedStartDateTime: Datetime!
  plannedEndDateTime: Datetime!
  packingListEntries: [PackingListEntry!]!

  # TODO: Consider to also add field "itemsCollections" to this type
  # It would return both boxes as well as unboxed items collections
  boxes: [Box!]!
  unboxedItemsCollections: [UnboxedItemsCollection!]!

  distributionEventsTrackingGroup: DistributionEventsTrackingGroup
}

type DistributionEventsTrackingEntry {
  id: ID!
  product: Product!
  size: Size!
  numberOfItems: Int!
  distributionEventsTrackingGroup: DistributionEventsTrackingGroup!
  dateTimeOfTracking: Datetime!
  flowDirection: DistributionEventTrackingFlowDirection!
}

type DistributionEventsTrackingGroup {
  id: ID!
  state: DistributionEventsTrackingGroupState!
  distributionEvents: [DistributionEvent!]!
  distributionEventsTrackingEntries: [DistributionEventsTrackingEntry!]!
  createdOn: Datetime!
}

type PackingListEntry {
  id: ID!
  product: Product
  size: Size
  numberOfItems: Int!
  matchingPackedItemsCollections: [ItemsCollection!]!
  state: PackingListEntryState!
}

type DistributionSpot implements Location {
  id: ID!
  name: String
  base: Base
  " Not implemented, only for compatibility with Location interface "
  boxes(paginationInput: PaginationInput, filterInput: FilterBoxInput): BoxPage
  comment: String!
  latitude: Float
  longitude: Float
  distributionEvents: [DistributionEvent!]!
}

"""
Representation of a boxtribute user.
"""
type User {
  id: ID!
  " The [`Organisation`]({{Types.Organisation}}) the user is a member of. Meaningful only if the currently authenticated user queries themselves "
  organisation: Organisation
  " First and last name. Accessible to any authenticated user "
  name: String
  " Available only if the currently authenticated user queries themselves "
  email: String
  validFirstDay: Date
  validLastDay: Date
  " List of all [`Bases`]({{Types.Base}}) this user can access. Meaningful only if the currently authenticated user queries themselves "
  bases: [Base]
  lastLogin: Datetime
  lastAction: Datetime
}

"""
Utility type holding a page of [`Beneficiaries`]({{Types.Beneficiary}}).
"""
type BeneficiaryPage {
  elements: [Beneficiary!]
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
Representation of a beneficiary.
The beneficiary is registered in a specific [`Base`]({{Types.Base}}).
"""
type Beneficiary {
  id: ID!
  firstName: String!
  lastName: String!
  dateOfBirth: Date
  " If dateOfBirth is not set, age will be null. "
  age: Int
  comment: String
  base: Base
  " All members of a family have the same group identifier "
  groupIdentifier: String!
  gender: HumanGender
  languages: [Language!]
  " Null if this beneficiary is the family head "
  familyHead: Beneficiary
  active: Boolean!
  isVolunteer: Boolean!
  signed: Boolean!
  registered: Boolean!
  signature: String
  dateOfSignature: Date
  " Number of tokens the beneficiary holds (sum of all transaction values) "
  tokens: Int
  " List of all [`Transactions`]({{Types.Transaction}}) that this beneficiary executed "
  transactions: [Transaction!]
  createdBy: User
  createdOn: Datetime
  lastModifiedBy: User
  lastModifiedOn: Datetime
  tags: [Tag!]
}

"""
Representation of a transaction executed by a beneficiary (spending or receiving tokens).
"""
type Transaction {
  id: ID!
  beneficiary: Beneficiary!
  product: Product
  " Number of transferred products "
  count: Int
  " Value of the transaction "
  tokens: Int
  description: String
  createdBy: User
  createdOn: Datetime!
}

"""
Additional information passed along in `*Page` types.
The client shall use the `has*Page` fields to determine whether to fetch more data.
"""
type PageInfo {
  " If true, a previous page is available. "
  hasPreviousPage: Boolean!
  " If true, a next page is available. "
  hasNextPage: Boolean!
  """
  An identifier for the first element on the page. The client shall use it for the [`PaginationInput.before`]({{Types.PaginationInput}}) field
  """
  startCursor: String!
  """
  An identifier for the last element on the page. The client shall use it for the [`PaginationInput.after`]({{Types.PaginationInput}}) field
  """
  endCursor: String!
}

"""
Optional filter values when retrieving [`Beneficiaries`]({{Types.Beneficiary}}).
If several fields are defined (not null), they are combined into a filter expression using logical AND (i.e. the filter returns only elements for which *all* fields are true).
"""
input FilterBeneficiaryInput {
  " Filter for all beneficiaries who were created on this date (incl.), or later. "
  createdFrom: Date
  " Filter for all beneficiaries who were created on this date (incl.), or earlier. "
  createdUntil: Date
  active: Boolean
  isVolunteer: Boolean
  registered: Boolean
  """
  Filter for all beneficiaries where pattern is (case-insensitive) part of first name, last name, or comment, or where pattern matches the group identifier
  """
  pattern: String
}

"""
Optional filter values when retrieving [`Boxes`]({{Types.Box}}).
If several fields are defined (not null), they are combined into a filter expression using logical AND (i.e. the filter returns only elements for which *all* fields are true).
"""
input FilterBoxInput {
  " Filter for all boxes that have *one* of the specified states. "
  states: [BoxState!]
  " Filter for all boxes that who were last modified on this date (incl.), or later. "
  lastModifiedFrom: Date
  " Filter for all boxes that who were last modified on this date (incl.), or earlier. "
  lastModifiedUntil: Date
  productGender: ProductGender
  productCategoryId: Int
  productId: Int
  sizeId: Int
  " Filter for all boxes that have *at least one* of the specified tags. "
  tagIds: [Int!]
}

input FilterProductInput {
  includeDeleted: Boolean = false
  type: ProductTypeFilter = Custom
}

input FilterBaseInput {
  includeDeleted: Boolean = false
}

"""
Optional input for queries/fields that return a page of elements.
The specified fields must be either none OR `first` OR `after, first` OR `before, last`. Other combinations result in unexpected behavior and/or errors.
The default page size (`first` and `last`, resp.) is 50.
This format is inspired by https://relay.dev/graphql/connections.htm#sec-Forward-pagination-arguments
"""
input PaginationInput {
  """
  Indicate requesting paginating of the first X elements after this cursor. By default, the first relevant element of the database. See also [`PageInfo.endCursor`]({{Types.PageInfo}})
  """
  after: String
  first: Int
  """
  Indicate requesting paginating of the last X elements before this cursor. See also [`PageInfo.startCursor`]({{Types.PageInfo}})
  """
  before: String
  last: Int
}

"""
Representation of an agreement between two organisations prior to start mutual shipments.
"""
type TransferAgreement {
  id: ID!
  sourceOrganisation: Organisation!
  targetOrganisation: Organisation!
  state: TransferAgreementState
  type: TransferAgreementType!
  requestedBy: User!
  requestedOn: Datetime!
  acceptedBy: User
  acceptedOn: Datetime
  terminatedBy: User
  terminatedOn: Datetime
  validFrom: Datetime!
  validUntil: Datetime
  comment: String
  " List of all non-deleted bases of the source organisation included in the agreement "
  sourceBases(filterInput: FilterBaseInput): [Base!]
  " List of all non-deleted bases of the target organisation included in the agreement "
  targetBases(filterInput: FilterBaseInput): [Base!]
  shipments: [Shipment!]!
}

"""
Representation of a shipment of boxes between two bases of two distinct organisations. The content is tracked via [`ShipmentDetails`]({{Types.ShipmentDetail}})
"""
type Shipment {
  id: ID!
  " Unique identifier of the shipment, constructed from ID, start date, source and target base names. E.g. `S042-230815-THxLE` "
  labelIdentifier: String!
  sourceBase: Base!
  targetBase: Base!
  state: ShipmentState
  startedBy: User!
  startedOn: Datetime!
  sentBy: User
  sentOn: Datetime
  receivingStartedBy: User
  receivingStartedOn: Datetime
  completedBy: User
  completedOn: Datetime
  canceledBy: User
  canceledOn: Datetime
  transferAgreement: TransferAgreement!
  details: [ShipmentDetail!]!
}

"""
Representation of a box in a shipment. Boxes might be added or removed on the source side, and received or marked as lost on the target side. All properties (product, location, size, quantity) at source and target side are tracked here
"""
type ShipmentDetail {
  id: ID!
  sourceProduct: Product
  targetProduct: Product
  sourceLocation: ClassicLocation
  targetLocation: ClassicLocation
  sourceSize: Size
  targetSize: Size
  sourceQuantity: Int
  targetQuantity: Int
  box: Box!
  shipment: Shipment!
  createdBy: User!
  createdOn: Datetime!
  removedBy: User
  removedOn: Datetime
  lostBy: User
  lostOn: Datetime
  receivedBy: User
  receivedOn: Datetime
}

type InsufficientPermissionError {
  " e.g. 'product:write' missing "
  name: String!
}
type ResourceDoesNotExistError {
  id: ID
  name: String!
}
type UnauthorizedForBaseError {
  " e.g. 'product:write' present but not for requested base "
  id: ID!
  name: String!
}
type InvalidPriceError {
  value: Int!
}
type EmptyNameError {
  " Dummy field since type definitions without fields are not possible "
  _: Boolean
}
type BoxesStillAssignedToProductError {
  labelIdentifiers: [String!]!
}
type StandardProductAlreadyEnabledForBaseError {
  existingStandardProductInstantiationId: ID!
}
type ProductTypeMismatchError {
  expectedType: ProductType!
}
type TagTypeMismatchError {
  expectedType: TagType!
}
type DeletedLocationError {
  name: String!
}
type DeletedTagError {
  name: String!
}

union MoveBoxesResult = BoxResult | InsufficientPermissionError | ResourceDoesNotExistError | UnauthorizedForBaseError | DeletedLocationError
union AssignTagToBoxesResult = BoxResult | InsufficientPermissionError | ResourceDoesNotExistError | UnauthorizedForBaseError | TagTypeMismatchError | DeletedTagError
union UnassignTagFromBoxesResult = BoxResult | InsufficientPermissionError | ResourceDoesNotExistError | UnauthorizedForBaseError
union DeleteBoxesResult = BoxResult | InsufficientPermissionError
union CreateCustomProductResult = Product | InsufficientPermissionError | ResourceDoesNotExistError | UnauthorizedForBaseError | InvalidPriceError | EmptyNameError
union EditCustomProductResult = Product | InsufficientPermissionError | ResourceDoesNotExistError | UnauthorizedForBaseError | InvalidPriceError | EmptyNameError | ProductTypeMismatchError
union DeleteProductResult = Product | InsufficientPermissionError | ResourceDoesNotExistError | UnauthorizedForBaseError | BoxesStillAssignedToProductError | ProductTypeMismatchError
union EnableStandardProductResult = Product | InsufficientPermissionError | ResourceDoesNotExistError | UnauthorizedForBaseError | InvalidPriceError | StandardProductAlreadyEnabledForBaseError
union EditStandardProductInstantiationResult = Product | InsufficientPermissionError | ResourceDoesNotExistError | UnauthorizedForBaseError | InvalidPriceError | ProductTypeMismatchError
union DisableStandardProductResult = Product | InsufficientPermissionError | ResourceDoesNotExistError | UnauthorizedForBaseError | BoxesStillAssignedToProductError | ProductTypeMismatchError
union StandardProductResult = StandardProduct | InsufficientPermissionError | ResourceDoesNotExistError
union StandardProductsResult = StandardProductPage | InsufficientPermissionError | UnauthorizedForBaseError

type Metrics {
  """
  Return number of families served by client's organisation in optional date range.
  If `after` *and* `before` are specified, construct date range for filtering.
  If one of `after` or `before` is specified, construct half-open date range.
  If none is specified, the result is an all-time number.
  """
  numberOfFamiliesServed(after: Date, before: Date): Int
  " Like `numberOfFamiliesServed` but add up all members of served families "
  numberOfBeneficiariesServed(after: Date, before: Date): Int
  """
  Return number of sales performed by client's organisation in optional date range.
  See `numberOfFamiliesServed` about using the `after` and `before` parameters.
  """
  numberOfSales(after: Date, before: Date): Int
  """
  Return number of boxes, and number of contained items, managed by client's organisation.
  """
  stockOverview: StockOverview
}

type StockOverview {
  productCategoryName: String
  numberOfBoxes: Int
  numberOfItems: Int
}
