type Query {
  beneficiaryDemographics(baseIds: [Int!]): BeneficiaryDemographicsData
  createdBoxes(baseId: Int): CreatedBoxesData
  topProductsCheckedOut(baseId: Int!): TopProductsCheckedOutData
  topProductsDonated(baseId: Int!): TopProductsDonatedData
  movedBoxes(baseId: Int!): MovedBoxesData
}

interface DataCube {
  facts: [Result]
  dimensions: Dimensions
}

union Result = BeneficiaryDemographicsResult | CreatedBoxesResult | TopProductsCheckedOutResult | TopProductsDonatedResult | MovedBoxesResult
union Dimensions = BeneficiaryDemographicsDimensions | CreatedBoxDataDimensions | TopProductsDimensions | MovedBoxDataDimensions

type BeneficiaryDemographicsData implements DataCube {
  facts: [BeneficiaryDemographicsResult]
  dimensions: BeneficiaryDemographicsDimensions
}

type BeneficiaryDemographicsDimensions {
  tag: [TagDimensionInfo]
}

type BeneficiaryDemographicsResult {
  age: Int
  gender: HumanGender
  createdOn: Date
  tagIds: [Int!]
  count: Int
}

type CreatedBoxesData implements DataCube {
  facts: [CreatedBoxesResult]
  dimensions: CreatedBoxDataDimensions
}

type CreatedBoxesResult {
  createdOn: Date
  categoryId: Int
  productId: Int
  gender: ProductGender
  boxesCount: Int
  itemsCount: Int
}

type CreatedBoxDataDimensions {
  product: [ProductDimensionInfo]
  category: [DimensionInfo]
}

type TopProductsCheckedOutData implements DataCube {
  facts: [TopProductsCheckedOutResult]
  dimensions: TopProductsDimensions
}

type TopProductsCheckedOutResult {
  checkedOutOn: Date
  productId: Int
  categoryId: Int
  rank: Int
  itemsCount: Int
}

type TopProductsDonatedData implements DataCube {
  facts: [TopProductsDonatedResult]
  dimensions: TopProductsDimensions
}

type TopProductsDonatedResult {
  createdOn: Date
  donatedOn: Date
  sizeId: Int
  productId: Int
  categoryId: Int
  rank: Int
  itemsCount: Int
}

type TopProductsDimensions {
  " Always null for topProductsCheckedOut query "
  size: [DimensionInfo]
  product: [ProductDimensionInfo]
  category: [DimensionInfo]
}

type MovedBoxesData implements DataCube {
  facts: [MovedBoxesResult]
  dimensions: MovedBoxDataDimensions
}

"""
A box can be moved in various ways:
- within a base (location ID with InStock/Donated)
- because it's lost (Lost)
- because it becomes scrap (Scrap)
- because it's about to be shipped (target base ID with MarkedForShipment)
- because it's being shipped (target base ID with InTransit/Receiving)
"""
type MovedBoxesResult {
  movedOn: Date!
  boxState: BoxState!
  locationId: Int
  baseId: Int
  categoryId: Int!
  boxesCount: Int!
}

type MovedBoxDataDimensions {
  category: [DimensionInfo]
  tag: [TagDimensionInfo]
  location: [DimensionInfo]
  base: [DimensionInfo]
}

interface BasicDimensionInfo {
  id: ID
  name: String
}

type DimensionInfo implements BasicDimensionInfo {
  id: ID
  name: String
}

type TagDimensionInfo implements BasicDimensionInfo {
  id: ID
  name: String
  " Hex color code "
  color: String
}

type ProductDimensionInfo implements BasicDimensionInfo {
  id: ID
  name: String
  gender: ProductGender
}
