version: 2.1
orbs:
  gcp-cli: circleci/gcp-cli@3.1.1
  slack: circleci/slack@3.4.2
  codecov: codecov/codecov@4.1.0
  queue: eddiewebb/queue@3.2.1
executors:
  node-executor:
    docker:
      - image: cimg/node:20.9.0
  python-executor:
    docker:
      - image: cimg/python:3.12.2
  python-node-executor:
    docker:
      - image: cimg/python:3.12.2-node
  python-mysql-executor:
    docker:
      - image: cimg/python:3.12.2
      - image: cimg/mysql:8.0.27
        environment:
          MYSQL_ROOT_PASSWORD: dropapp_root
          MYSQL_DATABASE: dropapp_dev
          MYSQL_ROOT_HOST: "%"
        command: --default-authentication-plugin=mysql_native_password --lower_case_table_names=1

jobs:
  checkout-to-workspace:
    executor: python-executor
    steps:
      - checkout
      - persist_to_workspace:
          root: .
          paths:
            - .

  install-node-packages:
    executor: node-executor
    working_directory: ~/
    steps:
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: dependency-cache-{{ checksum "pnpm-lock.yaml" }}
      - run:
          name: Install pnpm package manager
          command: |
            sudo corepack enable
            pnpm config set store-dir .pnpm-store
      - run:
          name: Install node packages for all front-ends
          command: pnpm install --frozen-lockfile
      - save_cache:
          key: dependency-cache-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - .pnpm-store
            - node_modules
            - front/node_modules
            - statviz/node_modules
            - shared-components/node_modules
      - persist_to_workspace:
          root: ~/
          paths:
            - .pnpm-store
            - node_modules
            - front/node_modules
            - statviz/node_modules
            - shared-components/node_modules

  build-back:
    executor: python-executor
    working_directory: ~/back
    steps:
      - attach_workspace:
          at: ~/
      # Restore cached dependencies
      - restore_cache:
          key: webapp-deps-{{ checksum "requirements.txt" }}-{{ checksum "requirements-deploy.txt" }}-{{ checksum "requirements-dev.txt" }}-{{ checksum "../.pre-commit-config.yaml" }}
      - run:
          name: create the python virtual environment and install non-cached dependencies
          command: |
            pyenv root
            python --version
            pyenv virtualenvs
            pyenv virtualenv --force env
            source $(pyenv root)/versions/3.12.2/envs/env/bin/activate
            pip install -e . -r requirements.txt -r requirements-deploy.txt
      # Cache the installed packages
      - save_cache:
          key: webapp-deps-{{ checksum "requirements.txt" }}-{{ checksum "requirements-deploy.txt" }}-{{ checksum "requirements-dev.txt" }}-{{ checksum "../.pre-commit-config.yaml" }}
          paths:
            - /home/circleci/.pyenv/versions/3.12.2/envs/env
      # save build to a CircleCI workspace
      - persist_to_workspace:
          root: ~/
          paths:
            - back/*
            - .pyenv/versions/3.12.2/envs

  build-front:
    executor: node-executor
    working_directory: ~/front
    resource_class: medium+
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Generate .env File
          command: |
            echo "
              FRONT_AUTH0_DOMAIN=${AUTH0_DOMAIN}
              FRONT_AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
              FRONT_AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
              FRONT_REDIRECT=${FRONT_REDIRECT}
              FRONT_LOGOUT_URL=${FRONT_LOGOUT_URL}
              FRONT_GRAPHQL_SERVER=${FRONT_GRAPHQL_SERVER}
              FRONT_OLD_APP_BASE_URL=${OLD_APP_BASE_URL}
              FRONT_SENTRY_FE_DSN=${SENTRY_FE_DSN}
              FRONT_SENTRY_ENVIRONMENT=${ENVIRONMENT}
              FRONT_SENTRY_TRACES_SAMPLE_RATE=${SENTRY_TRACES_SAMPLE_RATE}
              FRONT_ENVIRONMENT=${ENVIRONMENT}
            " > .env
      - run:
          name: Run style checks
          command: |
            pnpm lint:fix:all
            pnpm format:write:all
      - run:
          name: Build front
          command: |
            pnpm build
      - slack/notify-on-failure:
          only_for_branches: master,production
      # Add build to workspace
      - persist_to_workspace:
          root: ~/
          paths:
            - front/dist

  test-front:
    executor: node-executor
    working_directory: ~/front
    resource_class: medium+
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Test front app and create reports
          command: |
            DEBUG_PRINT_LIMIT=10000 pnpm test:coverage --test-timeout=40000
      - store_test_results:
          path: coverage/junit.xml
      - store_artifacts:
          path: coverage
          destination: coverage
      - codecov/upload:
          flags: frontend
          file: coverage/coverage-final.json
      - slack/notify-on-failure:
          only_for_branches: master,production
      - run:
          name: Show memory usage of FE tests in Bytes
          command: cat /sys/fs/cgroup/memory/memory.max_usage_in_bytes
          when: always

  # following https://circleci.com/docs/2.0/project-walkthrough/
  test-back:
    executor: python-mysql-executor
    working_directory: ~/back
    steps:
      # Attach workspace from build
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: webapp-deps-{{ checksum "requirements.txt" }}-{{ checksum "requirements-deploy.txt" }}-{{ checksum "requirements-dev.txt" }}-{{ checksum "../.pre-commit-config.yaml" }}
      - run:
          name: install dev dependencies for linting and testing
          command: |
            source $(pyenv root)/versions/3.12.2/envs/env/bin/activate
            pip install -r requirements-dev.txt
      - run:
          name: run style checks on back-end files
          command: |
            source $(pyenv root)/versions/3.12.2/envs/env/bin/activate
            # https://pre-commit.com/#pre-commit-run
            git ls-files . | xargs pre-commit run --files
      - save_cache:
          key: webapp-deps-{{ checksum "requirements.txt" }}-{{ checksum "requirements-deploy.txt" }}-{{ checksum "requirements-dev.txt" }}-{{ checksum "../.pre-commit-config.yaml" }}
          paths:
            - /home/circleci/.pyenv/versions/3.12.2/envs/env
            - ~/.cache/pre-commit
      # https://circleci.com/docs/2.0/postgres-config/#example-mysql-project
      - run:
          # Our primary container isn't MYSQL so run a sleep command until it's ready.
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: Install MySQL CLI; Import test data
          command: |
            sudo apt-get update && sudo apt-get install -y default-mysql-client
            mysql -h 127.0.0.1 -u root -pdropapp_root dropapp_dev < init.sql
      # run tests https://circleci.com/docs/2.0/collect-test-data/#pytest
      - run:
          name: Run pytest
          command: |
            source $(pyenv root)/versions/3.12.2/envs/env/bin/activate
            pytest --cov-report xml:artifacts/coverage.xml --cov=boxtribute_server --junit-xml=artifacts/tests/junit.xml --ignore=test/auth0_integration_tests
          environment:
            ENVIRONMENT: development
            MYSQL_PORT: 3306
      - queue/until_front_of_line:
          this-branch-only: false
          max-wait-time: "10"
          # this will not stop concurrency during multiple simultaneous re-runs
          # but works in normal scenarios
          my-pipeline: <<pipeline.number>>
      - run:
          name: Run pytest (cli tests only - auth0 dependency)
          command: |
            source $(pyenv root)/versions/3.12.2/envs/env/bin/activate
            pytest --cov-report xml:artifacts/coverage-cli.xml --cov=boxtribute_server --junit-xml=artifacts/tests/junit-cli.xml test/auth0_integration_tests
          environment:
            ENVIRONMENT: development
            MYSQL_PORT: 3306
      - store_test_results:
          path: artifacts/tests
      - store_artifacts:
          path: artifacts
      - slack/notify-on-failure:
          only_for_branches: master,production
      - codecov/upload:
          upload_args: -s artifacts
          flags: backend

  deploy:
    parameters:
      serviceName:
        type: string
    executor: gcp-cli/default
    working_directory: ~/back
    steps:
      # Attach workspace from build
      - attach_workspace:
          at: ~/
      # install gcloud orb
      - gcp-cli/install:
          version: "latest"
      - run:
          name: Inject Heap Analytics Script to index.html
          command: |
            sed -i "s/HEAPIO_APP_ID/${HEAPIO_APP_ID}/" ../front/dist/heapanalytics.js
            sed -i 's|</head>|<script src="/heapanalytics.js"></script></head>|' ../front/dist/index.html
      - run:
          name: Copy react build into flask app for deployment
          command: mv ../front/dist front-build
      - run:
          name: Create version.txt
          command: |
            echo "CircleCI build number:${CIRCLE_BUILD_NUM}
              Branch: ${CIRCLE_BRANCH}
              Git hash: ${CIRCLE_SHA1}" > version.txt
      - run:
          # GAE only installs dependencies from requirements.txt
          name: Extend dependencies to be installed in deploy-environment
          command: cat requirements-deploy.txt >> requirements.txt
      - run:
          name: Generate .env files
          command: |
            echo "
              AUTH0_DOMAIN=${AUTH0_DOMAIN}
              AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
              AUTH0_PUBLIC_KEY=${AUTH0_PUBLIC_KEY}
              MYSQL_USER=${DB_NAME}
              MYSQL_PASSWORD=${DB_PASS}
              MYSQL_DB=${DB_NAME}
              MYSQL_SOCKET=${DB_SOCKET}
              MYSQL_REPLICA_SOCKET=${DB_REPLICA_SOCKET}
              SENTRY_DSN=${SENTRY_BE_DSN}
              SENTRY_ENVIRONMENT=${ENVIRONMENT}
              SENTRY_RELEASE=${CIRCLE_SHA1}
              SENTRY_TRACES_SAMPLE_RATE=${SENTRY_TRACES_SAMPLE_RATE}
              SENTRY_PROFILES_SAMPLE_RATE=${SENTRY_PROFILES_SAMPLE_RATE}
              ENVIRONMENT=${ENVIRONMENT}
              " > .env
      - run:
          name: Generate GAE app.yaml file
          command: |
            sed 's/service: v2-staging/service: << parameters.serviceName >>/g' app.yaml > app-<< parameters.serviceName >>.yaml
            if [ << parameters.serviceName >> == v2-production ]; then
                echo -e "\ninstance_class: F2" >> app-<< parameters.serviceName >>.yaml
                # https://cloud.google.com/appengine/docs/standard/python3/runtime#entrypoint_best_practices
                echo -e "\nworkers = 4" >> gunicorn.conf.py
            fi;
      - run:
          name: Compress deployment artificats
          command: tar -cvzf ~/deploy.tar.gz ~/back
      - store_artifacts:
          name: Store copy of deployment artifacts
          path: ~/deploy.tar.gz
      - run:
          name: Authenticate the gcloud orb
          command: |
            gcloud version
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      - run:
          name: Deploy to GAE
          command: |
            gcloud app deploy app-<< parameters.serviceName >>.yaml
      - slack/notify-on-failure:
          only_for_branches: master,production

  deploy-api:
    parameters:
      serviceName:
        type: string
    executor: python-node-executor
    working_directory: ~/back
    steps:
      # Attach workspace from build
      - attach_workspace:
          at: ~/
      # install gcloud orb
      - gcp-cli/install
      - run:
          name: Create version.txt
          command: |
            echo "CircleCI build number:${CIRCLE_BUILD_NUM}
              Branch: ${CIRCLE_BRANCH}
              Git hash: ${CIRCLE_SHA1}" > version.txt
            if [ ! -z ${CIRCLE_TAG} ]; then
              sed -i "s/0.0.1/${CIRCLE_TAG}/" ../docs/graphql-api/query-api-config.yml
            elif [ ! -z ${CIRCLE_SHA1} ]; then
              sed -i "s/0.0.1/${CIRCLE_SHA1}/" ../docs/graphql-api/query-api-config.yml
            fi
      - run:
          # GAE only installs dependencies from requirements.txt
          name: Extend dependencies to be installed in deploy-environment
          command: cat requirements-deploy.txt >> requirements.txt
      - run:
          name: Generate .env files
          command: |
            echo "
              AUTH0_DOMAIN=${AUTH0_DOMAIN}
              AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
              AUTH0_PUBLIC_KEY=${AUTH0_PUBLIC_KEY}
              AUTH0_CLIENT_ID=${QUERY_API_AUTH0_CLIENT_ID}
              AUTH0_CLIENT_SECRET=${QUERY_API_AUTH0_CLIENT_SECRET}
              MYSQL_USER=${DB_NAME}
              MYSQL_PASSWORD=${DB_PASS}
              MYSQL_DB=${DB_NAME}
              MYSQL_SOCKET=${DB_SOCKET}
              MYSQL_REPLICA_SOCKET=${DB_REPLICA_SOCKET}
              SENTRY_DSN=${SENTRY_BE_DSN}
              SENTRY_ENVIRONMENT=${ENVIRONMENT}
              SENTRY_RELEASE=${CIRCLE_SHA1}
              SENTRY_TRACES_SAMPLE_RATE=${SENTRY_TRACES_SAMPLE_RATE}
              SENTRY_PROFILES_SAMPLE_RATE=${SENTRY_PROFILES_SAMPLE_RATE}
              ENVIRONMENT=${ENVIRONMENT}
              " > .env
      - run:
          name: Generate GAE app.yaml file
          command: |
            sed 's/service: api-staging/service: << parameters.serviceName >>/g' app-api.yaml > app-<< parameters.serviceName >>.yaml
      - restore_cache:
          name: Restore npm Package Cache
          keys:
            - docs-npm-spectaql-{{ checksum "../docs/graphql-api/package.json" }}
      - run:
          name: Generate GraphQL documentation
          command: |
            cd ../docs/graphql-api
            if [[ "<< parameters.serviceName >>" != api-production ]]; then
                sed -i 's/api.boxtribute/<< parameters.serviceName >>.boxtribute/g' query-api-config.yml
            fi
            npm install
            npx spectaql query-api-config.yml
            sed -i 's|stylesheets|docs/stylesheets|g' public/index.html
            sed -i 's|javascripts|docs/javascripts|g' public/index.html
            sed -i 's|images|docs/images|g' public/index.html
            mv public ../../back/graphql-docs
      - save_cache:
          name: Save npm Package Cache
          key: docs-npm-spectaql-{{ checksum "../docs/graphql-api/package.json" }}
          paths:
            - ~/docs/graphql-api/node_modules
      - run:
          name: Compress deployment artificats
          command: tar -cvzf ~/deploy.tar.gz ~/back
      - store_artifacts:
          name: Store copy of deployment artifacts
          path: ~/deploy.tar.gz
      - run:
          name: Authenticate the gcloud orb
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      - run:
          name: Deploy to GAE
          command: |
            gcloud app deploy app-<< parameters.serviceName >>.yaml
      - slack/notify-on-failure:
          only_for_branches: master,production

workflows:
  test:
    jobs:
      - checkout-to-workspace
      - install-node-packages:
          requires:
            - checkout-to-workspace
      - build-back:
          context: STAGING
          requires:
            - checkout-to-workspace
      - test-back:
          context: STAGING
          requires:
            - build-back
      - build-front:
          context: STAGING
          requires:
            - install-node-packages
      - test-front:
          context: STAGING
          requires:
            - install-node-packages

  build-and-deploy:
    jobs:
      # for staging and demo only (for production see below)
      - checkout-to-workspace:
          filters:
            branches:
              only:
                - master
                - production
      - install-node-packages:
          requires:
            - checkout-to-workspace
          filters:
            branches:
              only:
                - master
                - production

      # staging
      - build-front:
          name: build-front-staging
          context: STAGING
          requires:
            - install-node-packages
          filters:
            branches:
              only:
                - master
      - deploy:
          name: deploy-staging
          context: STAGING
          serviceName: v2-staging
          requires:
            - build-front-staging
          filters:
            branches:
              only:
                - master
      - deploy-api:
          name: deploy-api-staging
          context: STAGING
          serviceName: api-staging
          requires:
            - checkout-to-workspace
          filters:
            branches:
              only:
                - master

      # demo - runs on any commit to the production branch
      - build-front:
          name: build-front-demo
          context: DEMO
          requires:
            - install-node-packages
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - production
      - deploy:
          name: deploy-demo
          context: DEMO
          serviceName: v2-demo
          requires:
            - build-front-demo
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - production
      - deploy-api:
          name: deploy-api-demo
          context: DEMO
          serviceName: api-demo
          requires:
            - checkout-to-workspace
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - production

      # production - this can only be triggered by a tag
      - checkout-to-workspace:
          name: checkout-to-workspace-production
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - install-node-packages:
          name: install-node-packages-production
          requires:
            - checkout-to-workspace-production
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - build-front:
          name: build-front-production
          context: PRODUCTION
          requires:
            - install-node-packages-production
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy:
          name: deploy-production
          context: PRODUCTION
          serviceName: v2-production
          requires:
            - build-front-production
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - deploy-api:
          name: deploy-api-production
          context: PRODUCTION
          serviceName: api-production
          requires:
            - checkout-to-workspace-production
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
