version: 2.1
orbs:
  gcp-cli: circleci/gcp-cli@1.8.4
  slack: circleci/slack@3.4.2
  codecov: codecov/codecov@1.1.3
jobs:
  checkout-to-workspace:
    docker:
      - image: cimg/python:3.10.4-node
    steps:
      - checkout
      - persist_to_workspace:
          root: .
          paths:
            - .
  build-flask:
    docker:
      - image: cimg/python:3.10.4
    working_directory: ~/back
    steps:
      - attach_workspace:
          at: ~/
      # Restore cached dependencies
      - restore_cache:
          key: webapp-deps-{{ checksum "requirements.txt" }}
      - run:
          name: create the python virtual environment and install non-cached dependencies
          command: |
            pyenv root
            python --version
            pyenv virtualenvs
            pyenv virtualenv --force env
            source $(pyenv root)/versions/3.10.4/envs/env/bin/activate
            pip install -e . -r requirements.txt
      # Cache the installed packages
      - save_cache:
          key: webapp-deps-{{ checksum "requirements.txt" }}
          paths:
            - /home/circleci/.pyenv/versions/3.10.4/envs/env
      # save build to a CircleCI workspace
      - persist_to_workspace:
          root: ~/
          paths:
            - back/*
            - .pyenv/versions/3.10.4/envs

  build-and-test-react:
    docker:
      - image: cimg/python:3.10.4-node
    working_directory: ~/react
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Generate .env File
          command: |
            echo "
              REACT_APP_AUTH0_DOMAIN=${AUTH0_DOMAIN}
              REACT_APP_AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
              REACT_APP_AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
              REACT_APP_REDIRECT=${REACT_APP_REDIRECT}
              REACT_APP_LOGOUT_URL=${REACT_APP_LOGOUT_URL}
              REACT_APP_GRAPHQL_SERVER=${REACT_APP_GRAPHQL_SERVER}
              REACT_APP_SENTRY_FE_DSN=${SENTRY_FE_DSN}
            " > .env
      # following https://circleci.com/docs/2.0/yarn/
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - react-yarn-{{ checksum "yarn.lock" }}
      - run:
          name: Install Yarn Packages
          command: yarn install --immutable
      - save_cache:
          name: Save Yarn Package Cache
          key: react-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Build React App
          command: |
            yarn build
      - run:
          name: Test React App
          command: |
            yarn test
      # - run:
      #     name: Test React App Codecover
      #     command: |
      #       yarn run test:coverage
      - store_test_results:
          path: coverage
      - codecov/upload:
          file: coverage/clover.xml
          flags: frontend
      # Add build to workspace
      - persist_to_workspace:
          root: ~/
          paths:
            - react/build

  # following https://circleci.com/docs/2.0/project-walkthrough/
  test-flask:
    docker:
      - image: cimg/python:3.10.4
      - image: cimg/mysql:8.0.27
        environment:
          MYSQL_ROOT_PASSWORD: dropapp_root
          MYSQL_DATABASE: dropapp_dev
          MYSQL_ROOT_HOST: "%"
        command: --default-authentication-plugin=mysql_native_password --lower_case_table_names=1
    working_directory: ~/back
    steps:
      # Attach workspace from build
      - attach_workspace:
          at: ~/
      - restore_cache:
          key: webapp-dev-deps-{{ checksum "requirements-dev.txt" }}-{{ checksum "../.pre-commit-config.yaml" }}
      - run:
          name: install dev dependencies for linting and testing
          command: |
            source $(pyenv root)/versions/3.10.4/envs/env/bin/activate
            pip install -r requirements-dev.txt
      - run:
          name: run style checks on Python files
          command: |
            source $(pyenv root)/versions/3.10.4/envs/env/bin/activate
            pre-commit run --files **/*.py
      - save_cache:
          key: webapp-dev-deps-{{ checksum "requirements-dev.txt" }}-{{ checksum "../.pre-commit-config.yaml" }}
          paths:
            - /home/circleci/.pyenv/versions/3.10.4/envs/env
            - ~/.cache/pre-commit
      # https://circleci.com/docs/2.0/postgres-config/#example-mysql-project
      - run:
      # Our primary container isn't MYSQL so run a sleep command until it's ready.
          name: Waiting for MySQL to be ready
          command: |
            for i in `seq 1 10`;
            do
              nc -z 127.0.0.1 3306 && echo Success && exit 0
              echo -n .
              sleep 1
            done
            echo Failed waiting for MySQL && exit 1
      - run:
          name: Install MySQL CLI; Import test data
          command: |
            sudo apt-get update && sudo apt-get install -y default-mysql-client
            mysql -h 127.0.0.1 -u root -pdropapp_root dropapp_dev < init.sql
      # run tests https://circleci.com/docs/2.0/collect-test-data/#pytest
      - run:
          name: Run pytest
          command: |
            source $(pyenv root)/versions/3.10.4/envs/env/bin/activate
            pytest --cov-report xml:test-results/coverage.xml --cov=boxtribute_server
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
      - slack/notify-on-failure:
          only_for_branches: master,production
      - codecov/upload:
          file: test-results/coverage.xml
          flags: backend

  deploy:
    parameters:
      serviceName:
        type: string
    docker:
      - image: cimg/python:3.10.4-node
    working_directory: ~/back
    steps:
      # Attach workspace from build
      - attach_workspace:
          at: ~/
      # install gcloud orb
      - gcp-cli/install
      - unless:
          condition:
            matches:
              pattern: "^api-.+"
              value: << parameters.serviceName >>
          steps:
            - run:
                name: Copy react build into flask app for deployment
                command: mv ../react/build react-build
      - run:
          name: Create version.txt
          command: |
            echo "CircleCI build number:${CIRCLE_BUILD_NUM}
              Branch: ${CIRCLE_BRANCH}
              Git hash: ${CIRCLE_SHA1}" > version.txt
      - run:
          name: Generate .env files
          command: |
            echo "
              AUTH0_DOMAIN=${AUTH0_DOMAIN}
              AUTH0_AUDIENCE=${AUTH0_AUDIENCE}
              AUTH0_CLIENT_ID=${QUERY_API_AUTH0_CLIENT_ID}
              AUTH0_CLIENT_SECRET=${QUERY_API_AUTH0_CLIENT_SECRET}
              AUTH0_JWKS_KID=${AUTH0_JWKS_KID}
              AUTH0_JWKS_N=${AUTH0_JWKS_N}
              MYSQL_HOST=127.0.0.1
              MYSQL_USER=${DB_NAME}
              MYSQL_PASSWORD=${DB_PASS}
              MYSQL_DB=${DB_NAME}
              MYSQL_PORT=3306
              MYSQL_SOCKET=${DB_SOCKET}
              SENTRY_DSN=${SENTRY_BE_DSN}
              SENTRY_ENVIRONMENT=${SENTRY_ENVIRONMENT}
              SENTRY_RELEASE=${CIRCLE_SHA1}
              " > .env
            if [[ "<< parameters.serviceName >>" != "api-"* ]]; then echo "EXPOSE_FULL_GRAPHQL=1" >> .env; fi
      - run:
          name: Generate GAE app.yaml file
          command: |
            if [[ "<< parameters.serviceName >>" = "api-"* ]]; then
                sed 's/service: api-staging/service: << parameters.serviceName >>/g' app-api.yaml > app-<< parameters.serviceName >>.yaml
            else
                sed 's/service: v2-staging/service: << parameters.serviceName >>/g' app.yaml > app-<< parameters.serviceName >>.yaml
            fi
      - when:
          condition:
            matches:
              pattern: "^api-.+"
              value: << parameters.serviceName >>
          steps:
            - restore_cache:
                name: Restore npm Package Cache
                keys:
                  - docs-npm-spectaql-{{ checksum "../docs/graphql-api/package.json" }}
            - run:
                name: Generate GraphQL documentation
                command: |
                  cd ../docs/graphql-api
                  if [[ "<< parameters.serviceName >>" != api-production ]]; then
                      sed -i 's/api.boxtribute/<< parameters.serviceName >>.boxtribute/g' query-api-config.yml
                  fi
                  npm install
                  npx spectaql query-api-config.yml
                  sed -i 's|stylesheets|docs/stylesheets|g' public/index.html
                  sed -i 's|javascripts|docs/javascripts|g' public/index.html
                  sed -i 's|images|docs/images|g' public/index.html
                  mv public ../../back/graphql-docs
            - save_cache:
                name: Save npm Package Cache
                key: docs-npm-spectaql-{{ checksum "../docs/graphql-api/package.json" }}
                paths:
                  - ~/docs/graphql-api/node_modules
      - run:
          name: Compress deployment artificats
          command: tar -cvzf ~/deploy.tar.gz ~/back
      - store_artifacts:
          name: Store copy of deployment artifacts
          path: ~/deploy.tar.gz
      - run:
          name: Authenticate the gcloud orb
          command: |
            echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
      - run:
          name: Deploy to GAE
          command: |
            gcloud app deploy app-<< parameters.serviceName >>.yaml
      - slack/notify-on-failure:
          only_for_branches: master,production

workflows:
  test:
    jobs:
      - checkout-to-workspace
      - build-flask:
          context: STAGING
          requires:
            - checkout-to-workspace
      - test-flask:
          context: STAGING
          requires:
            - build-flask
      - build-and-test-react:
          context: STAGING
          requires:
            - checkout-to-workspace

  build-and-deploy:
    jobs:
      - checkout-to-workspace

      # staging
      - build-flask:
          context: STAGING
          requires:
            - checkout-to-workspace
          filters:
            branches:
              only: master,production
      - test-flask:
          context: STAGING
          requires:
            - build-flask
          filters:
            branches:
              only: master,production
      - build-and-test-react:
          name: build-and-test-react-staging
          context: STAGING
          requires:
            - checkout-to-workspace
          filters:
            branches:
              only: master,production
      - deploy:
          name: deploy-staging
          context: STAGING
          serviceName: v2-staging
          requires:
            - test-flask
            - build-and-test-react-staging
          filters:
            branches:
              only: master
      - deploy:
          name: deploy-api-staging
          context: STAGING
          serviceName: api-staging
          requires:
            - test-flask
          filters:
            branches:
              only: master

      # demo
      - build-and-test-react:
          name: build-and-test-react-demo
          context: DEMO
          requires:
            - checkout-to-workspace
          filters:
            tags:
              ignore: /.*/
            branches:
              only: production
      - deploy:
          name: deploy-demo
          context: DEMO
          serviceName: v2-demo
          requires:
            - test-flask
            - build-and-test-react-demo
          filters:
            tags:
              ignore: /.*/
            branches:
              only: production
      - deploy:
          name: deploy-api-demo
          context: DEMO
          serviceName: api-demo
          requires:
            - test-flask
          filters:
            tags:
              ignore: /.*/
            branches:
              only: production

      # production
      - build-and-test-react:
          name: build-and-test-react-production
          context: PRODUCTION
          requires:
            - checkout-to-workspace
          filters:
            branches:
              only: production
      - deploy:
          name: deploy-production
          context: PRODUCTION
          serviceName: v2-production
          requires:
            - test-flask
            - build-and-test-react-production
          filters:
            branches:
              only: production
      - deploy:
          name: deploy-api-production
          context: PRODUCTION
          serviceName: api-production
          requires:
            - test-flask
          filters:
            branches:
              only: production
